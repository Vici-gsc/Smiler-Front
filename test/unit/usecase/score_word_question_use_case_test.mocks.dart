// Mocks generated by Mockito 5.3.2 from annotations
// in smiler/test/unit/usecase/score_word_question_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smiler/data/repository/history_repository_impl.dart' as _i3;
import 'package:smiler/data/source/model/result.dart' as _i2;
import 'package:smiler/domain/model/history.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HistoryRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepositoryImpl extends _i1.Mock
    implements _i3.HistoryRepositoryImpl {
  @override
  _i4.Future<_i2.Result<void>> addHistory(
    int? questionTypeId,
    int? correctAnswerId,
    int? userAnswerId,
    bool? isCorrect,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHistory,
          [
            questionTypeId,
            correctAnswerId,
            userAnswerId,
            isCorrect,
          ],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #addHistory,
            [
              questionTypeId,
              correctAnswerId,
              userAnswerId,
              isCorrect,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #addHistory,
            [
              questionTypeId,
              correctAnswerId,
              userAnswerId,
              isCorrect,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
  @override
  _i4.Future<_i2.Result<void>> deleteAllHistories() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllHistories,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteAllHistories,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteAllHistories,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<List<_i5.History>>> getHistories({int? limit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistories,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.History>>>.value(
            _FakeResult_0<List<_i5.History>>(
          this,
          Invocation.method(
            #getHistories,
            [],
            {#limit: limit},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<List<_i5.History>>>.value(
                _FakeResult_0<List<_i5.History>>(
          this,
          Invocation.method(
            #getHistories,
            [],
            {#limit: limit},
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.History>>>);
}
